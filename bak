#!/usr/bin/env python3
import argparse
import datetime
import os
import re
import shutil
import subprocess
import sys
from functools import partial

BACKUP_FORMAT = ".{ext}.{ts}"
EXTENSION = 'bak'
TIMESTAMP_FORMAT = '%Y%m%dT%H%M%S'
TIMESTAMP_REGEX = r'\d{8}T\d{6}'
TIMESTAMP_LENGTH = 8+1+6


NUM_ERRORS = 0

def printerr(*args, **kwargs):
    global NUM_ERRORS
    print("Error:", *args, **kwargs, file=sys.stderr)
    NUM_ERRORS += 1


def current_timestamp():
    return datetime.datetime.now()


def current_timestamp_str():
    return current_timestamp().strftime(TIMESTAMP_FORMAT)


def backup_path(path, format=BACKUP_FORMAT):
    """
    Create a backup path given path. Use case is that a file exists at path and
    you want to rename it to (a non-existent) backup path. Obviously there's a
    small race condition (where a file is created at the backup path you
    specify before you move the file there but after this determines the backup
    path), but that's not worth handling.

    'format' is a string that will be formatted, filling in the
    'ext' (extension) and 'ts' (timestamp) values.
    """
    ts = current_timestamp_str()
    while os.path.lexists(path):  # keep adding to filename until it doesn't exist
        # strip trailing slash in case of directory
        path = path.rstrip('/') + format.format(ext=EXTENSION, ts=ts)

    return path


def original_file_path(path):
    """
    Given a backup path, get the original file path by stripping off
    backup filename componenents.
    """
    bak = BACKUP_FORMAT.format(ext=EXTENSION, ts=TIMESTAMP_REGEX).replace('.', r'\.')
    regex = rf'^(.*?)(?:{bak})+$'
    return re.sub(regex, r'\1', path)


def find_bak_files_with_prefix(files, prefix):
    """Filter the provided 'files' list to find backup files of the original filename.

    If a falsy prefix is provided, find all bak files.
    """
    extension_regex = rf'(?:\.{EXTENSION}\.{TIMESTAMP_REGEX})+$'
    pattern = (re.escape(prefix) if prefix else '.*?') + extension_regex
    regex = re.compile(pattern)
    return [f for f in files if regex.match(f)]


def test__find_files_with_prefix():
    files = [
        'karabiner.json',
        'karabiner.json.bak.20210203T222715',
        'karabiner.json.bak.20200113T044504',
        'karabiner.json.bak.20200112T201947',
        'karabiner.json.bak.20200116T003336',
        'karabiner.json.bak.20201217T124000',
        'karabiner.json.bak.20210204T143806',
        'karabiner.json.bak.20210304T150009',
        'karabiner.json.bak.20201023T164248',
        'assets',
        'automatic_backups',
        'unrelated-file.bak.20201023T164248',
    ]
    found = find_bak_files_with_prefix(files, 'karabiner.json')
    expected = files[1:-3]
    assert found == expected

    found = find_bak_files_with_prefix(files, None)
    expected = files[1:-3] + [files[-1]]
    assert found == expected


def most_recent_backup_file(original_path):
    """Find the most recent backup file for the 'original_path'"""
    path = original_path.rstrip('/')  # strip trailing slash in case of directory
    dir, filename = os.path.split(path)
    files = os.listdir(dir or '.')
    backup_files = find_bak_files_with_prefix(files, filename)
    if not backup_files:
        return None

    # The date format sorts properly, so no need to actually parse the dates.
    # in case of a file that needed repeated timestamps added, use length as tiebreaker
    backup_files.sort(key=lambda x: (x[-TIMESTAMP_LENGTH:], len(x)), reverse=True)
    return os.path.join(dir, backup_files[0])


def move_file(from_path, to_path, keep=False, symlinks=False):
    print(f"{'Copying' if keep else 'Moving'} {from_path!r} to {to_path!r}")
    func = os.rename
    if keep:
        if os.path.isdir(from_path):
            func = partial(shutil.copytree, symlinks=symlinks)
        else:
            func = shutil.copy2

    func(from_path, to_path)


def restore_file(path, keep=False, flip=False, symlinks=False):
    """Restore backed up file to its original location.

    If 'path' matches a backup pattern, derive its original location from that
    and restore it.

    If 'path' doesn't match a backup pattern, assume it's the original and
    find the most recent backup file in the same directory and restore it.
    """
    original_path = original_file_path(path)
    if original_path == path:  # original location provided
        path = most_recent_backup_file(original_path)

    if not path:
        printerr(f"No backup file for {original_path!r} found")
        return

    if not os.path.lexists(path):
        printerr(f"Path {path!r} doesn't exist, skipping")
        return

    if os.path.lexists(original_path):
        if flip:
            # bak up the original file first
            backup_file(original_path, symlinks=symlinks)
        else:
            printerr(f"Original file exists at {original_path!r}. Not restoring.")
            return

    move_file(path, original_path, keep)


def backup_file(path, keep=False, symlinks=False):
    move_file(path, backup_path(path), keep, symlinks)


def diff(difftool, files):
    """Diff the file (files[0]) provided with its most recent backup.

    If the original file is passed, compare to most recent backup.
    If a backup file is passed, compare that to the original file.
    """
    if len(files) > 1:
        printerr("Only specify one file for diff")
        return 2

    path = files[0]
    original_path = original_file_path(path)
    if not os.path.exists(original_path):
        printerr(f"No file at {path}")
        return 3

    if original_path == path:  # original location provided
        bak_path = most_recent_backup_file(path)
        if not bak_path:
            printerr(f"No bak file for {path}")
            return 3
    else:
        bak_path = path

    cmd = [difftool, bak_path, original_path]
    print(f"Running {cmd}")
    result = subprocess.run(cmd)
    return result.returncode


def list_baks(files):
    for dir in files:
        dir = os.path.abspath(dir)
        files = os.listdir(dir)
        found_files = find_bak_files_with_prefix(files, None)
        for file in found_files:
            print(os.path.join(dir, file))


def main(args):
    files = args.files
    keep = args.keep
    symlinks = args.symlinks
    restore = args.restore or args.flip
    flip = args.flip

    if args.list:
        return list_baks(files)

    if args.diff:
        return diff(args.difftool, files)

    for file in files:
        if restore:
            restore_file(file, keep, flip, symlinks)
            continue

        if not os.path.lexists(file):
            printerr(f"File {file!r} doesn't exist, skipping")
            continue

        backup_file(file, keep, symlinks)

    return NUM_ERRORS > 0


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Back up specified files')
    parser.add_argument('files', nargs='+', help='Files to back up')
    parser.add_argument('-k', '--keep', action='store_true', help='Keep existing file')
    parser.add_argument('-r', '--restore', action='store_true', help='Restore original file')
    parser.add_argument('-f', '--flip', action='store_true',
        help='"Flip" w/ the specified backup. Read "-r --force", but backs up the existing first. ' + \
            '-f implies -r or can be spelled -rf'
    )
    parser.add_argument('-s', '--symlinks', action='store_true',
        help='If copying a directory tree, leave symlinks as symlinks'
    )
    parser.add_argument('-d', '--diff', action="store_true", help='Diff the current and most recent bak')
    parser.add_argument('-t', '--difftool', default="kdiff3")
    parser.add_argument('-l', '--list', action="store_true", help="Treat 'files' as directories to list bak files")

    args = parser.parse_args()
    sys.exit(main(args))
